import java.awt.*; // Importa classes para constru√ß√£o da interface gr√°fica.
import java.awt.event.*; // Importa classes para lidar com eventos de entrada.
import javax.swing.*; // Importa classes para componentes da interface gr√°fica.
// import java.sql.*; // Importa classes para conex√£o com banco de dados (n√£o utilizado neste trecho).

public class TelaDePesquisa extends JFrame {
    // Declara√ß√£o de componentes da interface gr√°fica.
    public static JLabel lblPesquisa; // R√≥tulo para pesquisa.
    public static JTextField txtPesquisa; // Campo de texto para entrada de pesquisa.

    public static JLabel lblId; // R√≥tulo para ID.
    public static JTextField txtId; // Campo de texto para exibir ID.

    public static JLabel lblNome; // R√≥tulo para Nome.
    public static JTextField txtNome; // Campo de texto para exibir Nome.

    public static JLabel lblEmail; // R√≥tulo para Email.
    public static JTextField txtEmail; // Campo de texto para exibir Email.

    public static JButton btnPesquisar; // Bot√£o para iniciar a pesquisa.
    public static JButton btnPrimeiro; // Bot√£o para ir ao primeiro registro.
    public static JButton btnAnterior; // Bot√£o para ir ao registro anterior.
    public static JButton btnProximo; // Bot√£o para ir ao pr√≥ximo registro.
    public static JButton btnUltimo; // Bot√£o para ir ao √∫ltimo registro.

    public static JLabel lblNotificacoes; // R√≥tulo para exibir notifica√ß√µes.

    public static int tamanhoInputs = 20; // Define o tamanho dos campos de entrada.
    public static String txtUsuario = ""; // Armazena o texto atual do campo de pesquisa.

    // Construtor da classe TelaDePesquisa.
    public TelaDePesquisa() {
        super("Tela de Pesquisa"); // Define o t√≠tulo da janela.
        setLayout(new GridLayout(7, 1, 5, 5)); // Define o layout da janela com 7 linhas e 1 coluna.

        // Painel para o r√≥tulo e bot√£o de pesquisa.
        JPanel linha_lblPesquisa = new JPanel(new GridLayout(1, 2));

        lblPesquisa = new JLabel("Pesquisa:", SwingConstants.CENTER); // Cria o r√≥tulo para pesquisa.
        linha_lblPesquisa.add(lblPesquisa); // Adiciona o r√≥tulo ao painel.

        btnPesquisar = new JButton("üîç"); // Cria o bot√£o de pesquisa.
        btnPesquisar.setToolTipText("Pesquisar"); // Define uma dica para o bot√£o.
        btnPesquisar.setEnabled(false); // Inicialmente, o bot√£o √© desabilitado.
        linha_lblPesquisa.add(btnPesquisar); // Adiciona o bot√£o ao painel.

        add(linha_lblPesquisa); // Adiciona o painel √† janela.

        // Painel para o campo de entrada de pesquisa.
        JPanel linha_inputPesquisa = new JPanel(new GridLayout(1, 1));
        txtPesquisa = new JTextField(tamanhoInputs); // Cria o campo de texto para pesquisa.
        linha_inputPesquisa.add(txtPesquisa); // Adiciona o campo ao painel.

        add(linha_inputPesquisa); // Adiciona o painel √† janela.

        // Painel para o r√≥tulo e campo de ID.
        JPanel linha_id = new JPanel(new GridLayout(1, 2));
        lblId = new JLabel("Id:", SwingConstants.RIGHT); // R√≥tulo para ID.
        linha_id.add(lblId); // Adiciona o r√≥tulo ao painel.

        txtId = new JTextField(tamanhoInputs); // Cria o campo de texto para ID.
        txtId.setEnabled(false); // Campo desabilitado (apenas leitura).
        linha_id.add(txtId); // Adiciona o campo ao painel.

        add(linha_id); // Adiciona o painel √† janela.

        // Painel para o r√≥tulo e campo de Nome.
        JPanel linha_nome = new JPanel(new GridLayout(1, 2));
        lblNome = new JLabel("Nome:", SwingConstants.RIGHT); // R√≥tulo para Nome.
        linha_nome.add(lblNome); // Adiciona o r√≥tulo ao painel.

        txtNome = new JTextField(tamanhoInputs); // Cria o campo de texto para Nome.
        txtNome.setEditable(false); // Campo desabilitado (apenas leitura).
        linha_nome.add(txtNome); // Adiciona o campo ao painel.

        add(linha_nome); // Adiciona o painel √† janela.

        // Painel para o r√≥tulo e campo de Email.
        JPanel linha_email = new JPanel(new GridLayout(1, 2));
        lblEmail = new JLabel("Email:", SwingConstants.RIGHT); // R√≥tulo para Email.
        linha_email.add(lblEmail); // Adiciona o r√≥tulo ao painel.

        txtEmail = new JTextField(10); // Cria o campo de texto para Email (tamanho 10).
        txtEmail.setEditable(false); // Campo desabilitado (apenas leitura).
        linha_email.add(txtEmail); // Adiciona o campo ao painel.

        add(linha_email); // Adiciona o painel √† janela.

        // Painel para os bot√µes de navega√ß√£o.
        JPanel linha_botoes = new JPanel(new GridLayout(1, 4));

        btnPrimeiro = new JButton("<<"); // Bot√£o para ir ao primeiro registro.
        btnPrimeiro.setEnabled(false); // Inicialmente, o bot√£o √© desabilitado.
        linha_botoes.add(btnPrimeiro); // Adiciona o bot√£o ao painel.

        btnAnterior = new JButton("<"); // Bot√£o para ir ao registro anterior.
        btnAnterior.setEnabled(false); // Inicialmente, o bot√£o √© desabilitado.
        linha_botoes.add(btnAnterior); // Adiciona o bot√£o ao painel.

        btnProximo = new JButton(">"); // Bot√£o para ir ao pr√≥ximo registro.
        btnProximo.setEnabled(false); // Inicialmente, o bot√£o √© desabilitado.
        linha_botoes.add(btnProximo); // Adiciona o bot√£o ao painel.

        btnUltimo = new JButton(">>"); // Bot√£o para ir ao √∫ltimo registro.
        btnUltimo.setEnabled(false); // Inicialmente, o bot√£o √© desabilitado.
        linha_botoes.add(btnUltimo); // Adiciona o bot√£o ao painel.

        add(linha_botoes); // Adiciona o painel √† janela.

        // Painel para exibir notifica√ß√µes.
        JPanel linha_notificacoes = new JPanel(new GridLayout(1, 1));

        lblNotificacoes = new JLabel("Notifica√ß√µes", SwingConstants.CENTER); // R√≥tulo para notifica√ß√µes.
        linha_notificacoes.add(lblNotificacoes); // Adiciona o r√≥tulo ao painel.

        add(linha_notificacoes); // Adiciona o painel √† janela.

        // Adiciona a√ß√£o ao bot√£o de pesquisa.
        btnPesquisar.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    // Verifica se o campo de pesquisa est√° vazio.
                    if (txtPesquisa.getText().trim().length() <= 0) {
                        lblNotificacoes.setText(setHtmlFormat("Por favor, digite algo e tente novamente.")); // Mensagem de erro.
                        txtPesquisa.requestFocus(); // Foca no campo de pesquisa.
                        return;
                    } else {
                        // Chama o m√©todo de pesquisa na classe NavegadorDeRegistro.
                        NavegadorDeRegistro.pesquisar();
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de ir ao primeiro registro.
        btnPrimeiro.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (!ntfCampoVazio()) { // Verifica se o campo n√£o est√° vazio.
                        NavegadorDeRegistro.primeiroRegistro(); // Chama m√©todo para ir ao primeiro registro.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de ir ao registro anterior.
        btnAnterior.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (!ntfCampoVazio()) { // Verifica se o campo n√£o est√° vazio.
                        NavegadorDeRegistro.registroAnterior(); // Chama m√©todo para ir ao registro anterior.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de ir ao pr√≥ximo registro.
        btnProximo.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (!ntfCampoVazio()) { // Verifica se o campo n√£o est√° vazio.
                        NavegadorDeRegistro.proximoRegistro(); // Chama m√©todo para ir ao pr√≥ximo registro.
                    }
                }
            }
        );

        // Adiciona a√ß√£o ao bot√£o de ir ao √∫ltimo registro.
        btnUltimo.addActionListener(
            new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent event) {
                    if (!ntfCampoVazio()) { // Verifica se o campo n√£o est√° vazio.
                        NavegadorDeRegistro.ultimoRegistro(); // Chama m√©todo para ir ao √∫ltimo registro.
                    }
                }
            }
        );

        // Adiciona um listener para o campo de pesquisa.
        txtPesquisa.addKeyListener(
            new KeyAdapter() {
                @Override
                public void keyReleased(KeyEvent e) {
                    // Verifica se o texto de pesquisa mudou.
                    if (!txtPesquisa.getText().trim().equals(txtUsuario) && txtPesquisa.getText().trim().length() > 0) {
                        if (e.getKeyCode() == KeyEvent.VK_ENTER) { // Verifica se a tecla Enter foi pressionada.
                            NavegadorDeRegistro.pesquisar(); // Realiza a pesquisa.
                        }
                        btnPesquisar.setEnabled(true); // Habilita o bot√£o de pesquisa.
                    } else {
                        btnPesquisar.setEnabled(false); // Desabilita o bot√£o se n√£o houver mudan√ßas.
                    }
                }
            }
        );

        setSize(250, 300); // Define o tamanho da janela.
        setVisible(true); // Torna a janela vis√≠vel.
        txtPesquisa.requestFocus(); // Foca no campo de pesquisa ao abrir.
    }

    // M√©todo para verificar se o campo de pesquisa est√° vazio.
    public static boolean ntfCampoVazio() {
        if (txtPesquisa.getText().trim().length() <= 0) {
            lblNotificacoes.setText(setHtmlFormat("Ops! Campo vazio. Por favor, digite algo e tente novamente.")); // Mensagem de erro.
            txtPesquisa.requestFocus(); // Foca no campo de pesquisa.
            return true; // Retorna verdadeiro se o campo est√° vazio.
        } else {
            return false; // Retorna falso se o campo n√£o est√° vazio.
        }
    }

    // M√©todo para limpar os campos e exibir notifica√ß√µes.
    public static void limparCampos(String notificacao) {
        btnPesquisar.setEnabled(false); // Desabilita o bot√£o de pesquisa.
        txtId.setText(""); // Limpa o campo de ID.
        txtNome.setText(""); // Limpa o campo de Nome.
        txtEmail.setText(""); // Limpa o campo de Email.
        btnPrimeiro.setEnabled(false); // Desabilita bot√£o de primeiro registro.
        btnAnterior.setEnabled(false); // Desabilita bot√£o de registro anterior.
        btnProximo.setEnabled(false); // Desabilita bot√£o de pr√≥ximo registro.
        btnUltimo.setEnabled(false); // Desabilita bot√£o de √∫ltimo registro.
        if (!notificacao.equals("")) {
            lblNotificacoes.setText(setHtmlFormat(notificacao)); // Exibe notifica√ß√£o se n√£o for vazia.
        }
    }

    // M√©todo para formatar texto em HTML para exibi√ß√£o.
    public static String setHtmlFormat(String strTexto) {
        return "<html><body>" + strTexto + "</body></html>"; // Retorna o texto formatado.
    }

    // M√©todo principal para executar a aplica√ß√£o.
    public static void main(String[] args) {
        TelaDePesquisa appTelaDePesquisa = new TelaDePesquisa(); // Cria uma nova inst√¢ncia da tela de pesquisa.
        appTelaDePesquisa.setDefaultCloseOperation(EXIT_ON_CLOSE); // Define a opera√ß√£o padr√£o ao fechar a janela.
    }
}
